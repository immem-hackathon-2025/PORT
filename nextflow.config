params {
    input_dir = null
    output_dir = "${baseDir}/output"
    assembler = 'autocycler'
    medaka_model = 'r1041_e82_400bps_sup'
    max_memory = '16.GB'
    max_cpus = 12
    max_time = '10.h'
    read_type='ont_r10'
    assemblies = null
}

profiles {
    standard {
        docker.runOptions = '-u $(id -u):$(id -g)'
        docker.enabled = true

        process {
            executor = 'local'
            container = 'varunshamanna/bash_ghru'

            withLabel:autocycler_container {
                container = 'varunshamanna/autocycler:v0.5.2'
                //containerOptions = '-it --entrypoint /bin/bash'
            }
            withLabel:porechop_container {
                container = 'quay.io/biocontainers/porechop:0.2.4--py310h84f13bb_8'
            }
            withLabel:dragonflye_container {
                container = 'varunshamanna/dragonflye_medaka'
            }
            withLabel:nanoplot_container {
                container = 'quay.io/biocontainers/nanoplot:1.42.0--pyhdfd78af_0'
            }
            withLabel:quast_container {
                container = 'quay.io/biocontainers/quast:5.3.0--py313pl5321h5ca1c30_2'
            }
            withLabel:amrfinderplus_container {
                container = 'quay.io/staphb/ncbi-amrfinderplus:latest'
            } 
            withLabel:mobsuite_container {
                container = 'quay.io/biocontainers/mob_suite:3.1.9--pyhdfd78af_1'
            }
            withLabel:plasmidfinder_container {
                container = 'quay.io/staphb/plasmidfinder:latest'
            }   
        }
    }
}

//define maximum resources that can be requested
//this is to avoid users requesting too much resources by mistake
process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    // Capture exit codes from upstream processes when piping
    //process.shell = ['/bin/bash', '-euo', 'pipefail']


    // memory errors which should be retried. otherwise error out
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus          = { check_max( 1                  , 'cpus'    ) }
        memory        = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus          = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus          = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus          = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time          = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory        = { check_max( 12.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}